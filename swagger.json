{
    "openapi": "3.0.0",
    "info": {
        "title": "Support Requirement System ",
        "version": "1.0.0",
        "description": "A simple web application where [Frontend](https://github.com/adityajain-Infobeans/Support-Requirement-System-Frontend) is created using Vue and [Backend](https://github.com/adityajain-Infobeans/Support-Requirement-System-Backend) is created on node using express. Frontend will communicate with Backend via REST APIs for authentication and database operations",

        "contact": {
            "name": "Aditya Jain",
            "url": "https://aadityajain.dev",
            "email": "adityan.jain@infobeans.com"
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "tags": [
        {
            "name": "Employee",
            "description": "Employee login API"
        },
        {
            "name": "Client",
            "description": "Client list API"
        },
        {
            "name": "Comment",
            "description": "Comments CRUD API"
        },

        {
            "name": "Requirement",
            "description": "Requirements CRUD API"
        }
    ],

    "servers": [
        {
            "url": "http://localhost:3000",
            "description": "Development server"
        },
        {
            "url": "https://infobeans-support.herokuapp.com/",
            "description": "Production server"
        }
    ],

    "paths": {
        "/client": {
            "get": {
                "summary": "Retrieve clients list.",
                "tags": ["Client"],
                "description": "Retrieve a list of clients from our database. JWT token is required",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Clients successfully retrieved from database"
                    },
                    "204": {
                        "description": "No client found in database"
                    },
                    "500": {
                        "description": "Error while querying clients"
                    }
                }
            }
        },
        "/employee": {
            "post": {
                "summary": "Authenticate user & provide JWT",
                "tags": ["Employee"],
                "description": "Checks provided user credentials with the database, if they match, authorize user & provide JWT,else send error message",
                "consumes": ["application/json"],
                "produces": ["application/json"],

                "requestBody": {
                    "description": "Checks provided user credentials with the database",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["email", "password"],
                                "properties": {
                                    "email": {
                                        "type": "string"
                                    },
                                    "password": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Employee Found"
                    },
                    "406": {
                        "description": "No Employee found with these credentials"
                    },
                    "500": {
                        "description": "error occurred while querying"
                    },
                    "503": {
                        "description": "Error while signing JWT"
                    },
                    "400": {
                        "description": "Some Parameter missing"
                    }
                }
            }
        },
        "/requirement/{requirement_id}": {
            "get": {
                "summary": "Get requirement data",
                "tags": ["Requirement"],
                "description": "Will return requirement data associated with provided id.",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "requirement_id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Requirement id (required)"
                    }
                ],

                "responses": {
                    "200": {
                        "description": "Requirement data successfully retrieved"
                    },
                    "406": {
                        "description": "Invalid requirement id"
                    },
                    "500": {
                        "description": "Error while querying requirement"
                    }
                }
            },
            "delete": {
                "summary": "Delete requirement entry from database",
                "tags": ["Requirement"],
                "description": " Delete the requirement with provided requirement id from database",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "requirement_id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Requirement id (required)"
                    }
                ],

                "responses": {
                    "200": {
                        "description": "Requirement deleted successfully"
                    },
                    "400": {
                        "description": "Requirement id is not provided"
                    },
                    "404": {
                        "description": "Id doesn't exist in database"
                    },
                    "503": {
                        "description": "Error while querying data"
                    }
                }
            },
            "put": {
                "summary": "Update requirement entry in database.",
                "tags": ["Requirement"],
                "description": "Update the requirement entry with provided id in database",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "requirement_id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Requirement id (required)"
                    }
                ],
                "requestBody": {
                    "description": "Create a new entry with provided data in database",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "status",
                                    "priority",
                                    "subject",
                                    "description",
                                    "client_id"
                                ],
                                "properties": {
                                    "status": {
                                        "type": "string"
                                    },
                                    "priority": {
                                        "type": "string"
                                    },
                                    "contact": {
                                        "type": "integer"
                                    },
                                    "subject": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "client_id": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },

                "responses": {
                    "200": {
                        "description": "Requirement successfully updated"
                    },
                    "400": {
                        "description": "Requirement id is not provided"
                    },
                    "404": {
                        "description": "Id doesn't exist in database"
                    },
                    "500": {
                        "description": "Error while updating requirement"
                    }
                }
            }
        },
        "/requirement/": {
            "get": {
                "summary": "Get all requirement data",
                "tags": ["Requirement"],
                "description": "It will return all requirements data",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],

                "responses": {
                    "200": {
                        "description": "Employee Found"
                    },
                    "404": {
                        "description": "No requirement found in database"
                    },
                    "503": {
                        "description": "Error while querying requirements"
                    }
                }
            },
            "post": {
                "summary": "Create new requirement entry in database.",
                "tags": ["Requirement"],
                "description": "Create a new entry with provided data in database",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "description": "Create a new entry with provided data in database",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "status",
                                    "priority",
                                    "subject",
                                    "description",
                                    "client_id"
                                ],
                                "properties": {
                                    "status": {
                                        "type": "string"
                                    },
                                    "priority": {
                                        "type": "string"
                                    },
                                    "contact": {
                                        "type": "integer"
                                    },
                                    "subject": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "client_id": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },

                "responses": {
                    "200": {
                        "description": "Requirement created successfully"
                    },
                    "400": {
                        "description": "Parameter missing"
                    },
                    "500": {
                        "description": "Error while querying requirement"
                    }
                }
            }
        },
        "/summary/": {
            "get": {
                "summary": "Get requirements summary",
                "tags": ["Requirement"],
                "description": "Fetch count of open requirements, closed requirements & total requirements",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],

                "responses": {
                    "200": {
                        "description": "Summary data retrieved successfully"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/comment/{comment_id}": {
            "get": {
                "summary": "Get comment data",
                "tags": ["Comment"],
                "description": "It will fetch all data associated with provided requirement id",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "comment_id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Comment id (required)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment data successfully retrieved"
                    },
                    "400": {
                        "description": "Comment id not provided."
                    },
                    "406": {
                        "description": "Comment id doesn't exist in database"
                    },
                    "503": {
                        "description": "Error while querying comment"
                    }
                }
            },
            "put": {
                "summary": "Update comment data of provided comment id",
                "tags": ["Comment"],
                "description": "Update comment data of provided comment id",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "comment_id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Comment id (required)"
                    }
                ],
                "requestBody": {
                    "description": "new comment content",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["comment"],
                                "properties": {
                                    "comment": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Summary data retrieved successfully"
                    },
                    "400": {
                        "description": "Comment id is not provided"
                    },
                    "500": {
                        "description": "Error while updating comment"
                    },
                    "404": {
                        "description": "Invalid comment id"
                    }
                }
            },
            "delete": {
                "summary": "Delete comment data from database",
                "tags": ["Comment"],
                "description": "Delete the comment with provided id from the database. JWT token is required",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "comment_id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Comment id (required)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment deleted successfully"
                    },
                    "400": {
                        "description": "Comment id is not provided"
                    },
                    "404": {
                        "description": "Invalid id"
                    },
                    "500": {
                        "description": "Error while querying data"
                    }
                }
            }
        },
        "/comment/T_{requirement_id}": {
            "get": {
                "summary": "Get all comments of provided requirement",
                "tags": ["Comment"],
                "description": "It will fetch all comments associated with provided requirement id",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "requirement_id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Requirement id (required)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All comments successfully retrieved"
                    },
                    "503": {
                        "description": "Error while querying comments"
                    }
                }
            }
        },
        "/comment/": {
            "post": {
                "summary": "Write comment data to database",
                "tags": ["Comment"],
                "description": "Create a new entry by writing the provided comment data in the database. JWT token is required",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "description": "Create a new entry by writing the provided comment data in the database",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["comment", "requirement_id"],
                                "properties": {
                                    "requirement_id": {
                                        "type": "integer"
                                    },
                                    "comment": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comment created successfully"
                    },
                    "400": {
                        "description": "Parameter missing"
                    },
                    "503": {
                        "description": "Error while querying comment"
                    }
                }
            }
        }
    }
}
